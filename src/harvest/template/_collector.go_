package main

import (
	"goharvest2/poller/collector"
	"goharvest2/share/matrix"

	/* You might want to uncomment and use some of these:

	"goharvest2/share/logger"
	"goharvest2/share/errors"
	*/
)

/* Logging is useful for debugging your collector, here are a few exmaples:

	logger.Warn(me.Prefix, "nothing to collect")
	logger.Debug(me.Prefix, "collected %d data points!!", count)
	logger.Error(me.Prefix, "open URL: %s", err.Error())

	(the examples assume you are in a struct method with received "me")
*/


/*
You collector is initialized with a number of fields, some of them are important to know:
  - Name		your name!
  - Object		name of your object
  - Matrix      this is where you put collected data
  - Options     the startup options of the poller
  - Params		parameters loaded from harvest.yml and the template of your collector
  - Prefix		formatted prefix for logger
You can add more attributes to the collector if you want!
*/
type COLLECTOR struct {
	*collector.AbstractCollector
}

/*
This method creates a new instance of your collector, no need to touch it.
*/
func New(a *collector.AbstractCollector) collector.Collector {
	return &COLLECTOR{AbstractCollector: a}
}

/* This method initializes your collector. You can add more things here, bur remove
   "collector.Init(me)" only if you know what you are doing. The last method will initialize
   the schedule of your collector, its metadata and will run a few other important 
   procedures.

   Most commonly you will declare metrics of your Matrix in this method and check that
   important parameters are not missing. Examples:
   
   if err := me.Matrix.AddMetricInt64("some_methirc"); err != nil {
	   return err
   }

   if me.Params.GetChildContentS("addr") == "" {
	   return errors.New(errors.MISSING_PARAM, "addr")
   }
*/
func (me *COLLECTOR) Init() error {
	return collector.Init(me)
}


/* This is the only method that needs to be written by You!
   The *matrix.Matrix that is returned is most commonly me.Matrix.
   Remember to return serious errors and log trivial ones */
func (me *COLLECTOR) PollData() (*matrix.Matrix, error) {

	// first flush data from previous poll
	me.Matrix.Reset()

	/* collect data and feed into me.Matrix
	   remember you need to declare instances before adding numeric values
	   examples:
	*/

	/* metric := me.Matrix.GetMetric("some_metric")
	   if instance, err = me.Matrix.AddInstance("some_instance"); err != nil {
		return nil, err
		} else {
			if err = metric.SetValueString(instance, "10"); err != nil {
				return nil, err
			}

			if err = metric.AddValueInt64(instance, 10); err != nil {
				return nil, err
			}
		}
		// now the value for "some_instance" is 20!
	}
	*/

	return me.Matrix, nil
}